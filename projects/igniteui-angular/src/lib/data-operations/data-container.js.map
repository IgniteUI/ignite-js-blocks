{"version":3,"sources":["src/data-operations/data-container.ts"],"names":[],"mappings":"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","file":"data-container.js","sourcesContent":["import { IDataState } from \"./data-state.interface\";\r\nimport { DataUtil } from \"./data-util\";\r\nimport { FilteringCondition } from \"./filtering-condition\";\r\nimport { FilteringLogic, IFilteringExpression } from \"./filtering-expression.interface\";\r\nimport { IFilteringState } from \"./filtering-state.interface\";\r\nimport { FilteringStrategy, IFilteringStrategy } from \"./filtering-strategy\";\r\nimport { IPagingState, PagingError } from \"./paging-state.interface\";\r\nimport { IRecordInfo } from \"./record-info.interface\";\r\nimport { ISortingExpression, SortingDirection } from \"./sorting-expression.interface\";\r\nimport { ISortingState } from \"./sorting-state.interface\";\r\nimport { ISortingStrategy, SortingStrategy } from \"./sorting-strategy\";\r\n\r\nexport enum DataAccess {\r\n    OriginalData,\r\n    TransformedData\r\n}\r\nexport class DataContainer {\r\n    public data: any[];\r\n    /**\r\n     * processed data\r\n     */\r\n    public transformedData: any[];\r\n    public state: IDataState = {\r\n    };\r\n    constructor(data: any[] = []) {\r\n        this.data = data;\r\n        this.transformedData = data;\r\n    }\r\n    public process(state?: IDataState): DataContainer {\r\n        if (state) {\r\n            this.state = state;\r\n        }\r\n        this.transformedData = this.data;\r\n        // apply data operations\r\n        this.transformedData = DataUtil.process(this.data, this.state);\r\n        return this;\r\n    }\r\n    // CRUD operations\r\n    // access data records\r\n    public getIndexOfRecord(record: object, dataAccess: DataAccess = DataAccess.OriginalData): number {\r\n        const data = this.accessData(dataAccess);\r\n        return data.indexOf(record);\r\n    }\r\n    public getRecordByIndex(index: number, dataAccess: DataAccess = DataAccess.OriginalData): object {\r\n        const data = this.accessData(dataAccess);\r\n        return data[index];\r\n    }\r\n    public getRecordInfoByKeyValue(fieldName: string,\r\n                                   value: any,\r\n                                   dataAccess: DataAccess = DataAccess.OriginalData): IRecordInfo {\r\n        const data = this.accessData(dataAccess);\r\n        const len = data.length;\r\n        const res: IRecordInfo = {index: -1, record: undefined};\r\n        let i;\r\n        for (i = 0; i < len; i++) {\r\n            if (data[i][fieldName] === value) {\r\n                res.index = i;\r\n                res.record = data[i];\r\n                break;\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n    public addRecord(record: object, at?: number): void {\r\n        const data = this.accessData(DataAccess.OriginalData);\r\n        if (at === null || at === undefined) {\r\n            data.push(record);\r\n        } else {\r\n            data.splice(at, 0, record);\r\n        }\r\n    }\r\n    public deleteRecord(record: object): boolean {\r\n        const index: number = this.getIndexOfRecord(record, DataAccess.OriginalData);\r\n        return this.deleteRecordByIndex(index);\r\n    }\r\n    public deleteRecordByIndex(index: number): boolean {\r\n        const data = this.accessData(DataAccess.OriginalData);\r\n        return data.splice(index, 1).length === 1;\r\n    }\r\n    public updateRecordByIndex(index: number, newProperties: object): object {\r\n        const dataAccess: DataAccess = DataAccess.OriginalData;\r\n        const foundRec = this.getRecordByIndex(index, dataAccess);\r\n        if (!foundRec) {\r\n            return undefined;\r\n        }\r\n        return Object.assign(foundRec, newProperties);\r\n    }\r\n    protected accessData(dataAccess: DataAccess) {\r\n        let res;\r\n        switch (dataAccess) {\r\n            case DataAccess.OriginalData:\r\n            res = this.data;\r\n            break;\r\n            case DataAccess.TransformedData:\r\n            res = this.transformedData;\r\n            break;\r\n        }\r\n        return res;\r\n    }\r\n}\r\n"]}