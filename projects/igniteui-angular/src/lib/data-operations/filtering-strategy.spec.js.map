{"version":3,"sources":["src/data-operations/filtering-strategy.spec.ts"],"names":[],"mappings":";;AAOA,6DAA2D;AAE3D,gCAAuH;AAEvH,QAAQ,CAAC,gCAAgC,EAAE;IACvC,IAAI,aAA4B,CAAC;IACjC,IAAI,IAAc,CAAC;IACnB,IAAI,EAAqB,CAAC;IAC1B,UAAU,CAAC;QACP,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;QACpC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;QAC1B,EAAE,GAAG,IAAI,wBAAiB,EAAE,CAAC;IACjC,CAAC,CAAC,CAAC;IACH,EAAE,CAAE,gBAAgB,EAAE;QAClB,IAAM,GAAG,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBACrB,SAAS,EAAE,yBAAkB,CAAC,MAAM,CAAC,WAAW;gBAChD,SAAS,EAAE,QAAQ;gBACnB,SAAS,EAAE,CAAC;aACf,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aAC1C,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CAAC;IACH,EAAE,CAAE,kCAAkC,EAAE;QACpC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAM,GAAG,GAAG,EAAE,CAAC,wBAAwB,CAAC,GAAG,EACvC;YACI;gBACI,SAAS,EAAE,yBAAkB,CAAC,MAAM,CAAC,QAAQ;gBAC7C,SAAS,EAAE,QAAQ;gBACnB,UAAU,EAAE,KAAK;gBACjB,SAAS,EAAE,KAAK;aACnB;YACD;gBACI,SAAS,EAAE,yBAAkB,CAAC,MAAM,CAAC,QAAQ;gBAC7C,SAAS,EAAE,QAAQ;gBACnB,SAAS,EAAE,CAAC;aACf;SACJ,EACD,qBAAc,CAAC,EAAE,CAAC,CAAC;QACvB,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,EAAE,CAAE,mBAAmB,EAAE;QACrB,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAM,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,GAAG,EAAE;YAC1B,SAAS,EAAE,yBAAkB,CAAC,OAAO,CAAC,KAAK;YAC3C,SAAS,EAAE,SAAS;SACvB,EAAE,CAAC,CAAC,CAAC,CAAC;QACP,MAAM,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;IACH,EAAE,CAAE,wBAAwB,EAAE;QACzB,IAAI,CAAC,CAAC,CAAwB,CAAC,MAAM,GAAG,KAAK,CAAC;QAC/C,IAAM,SAAS,GAAG,IAAI,wBAAiB,EAAE,CAAC;QAC1C,IAAM,GAAG,GAAG,SAAS,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAChC,SAAS,EAAE,yBAAkB,CAAC,MAAM,CAAC,QAAQ;gBAC7C,SAAS,EAAE,QAAQ;gBACnB,SAAS,EAAE,KAAK;aACnB,CAAC,CAAC,CAAC;QACJ,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aAC1C,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"filtering-strategy.spec.js","sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport {\r\n    async,\r\n    TestBed\r\n} from \"@angular/core/testing\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport { DataGenerator } from \"./test-util/data-generator\";\r\n\r\nimport { FilteringCondition, FilteringLogic, FilteringStrategy, IFilteringExpression, IFilteringState } from \"../main\";\r\n\r\ndescribe(\"Unit testing FilteringStrategy\", () => {\r\n    let dataGenerator: DataGenerator;\r\n    let data: object[];\r\n    let fs: FilteringStrategy;\r\n    beforeEach(() => {\r\n        dataGenerator = new DataGenerator();\r\n        data = dataGenerator.data;\r\n        fs = new FilteringStrategy();\r\n    });\r\n    it (\"tests `filter`\", () => {\r\n        const res = fs.filter(data, [{\r\n                condition: FilteringCondition.number.greaterThan,\r\n                fieldName: \"number\",\r\n                searchVal: 1\r\n            }]);\r\n        expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([2, 3, 4]);\r\n    });\r\n    it (\"tests `matchRecordByExpressions`\", () => {\r\n        const rec = data[0];\r\n        const res = fs.matchRecordByExpressions(rec,\r\n            [\r\n                {\r\n                    condition: FilteringCondition.string.contains,\r\n                    fieldName: \"string\",\r\n                    ignoreCase: false,\r\n                    searchVal: \"ROW\"\r\n                },\r\n                {\r\n                    condition: FilteringCondition.number.lessThan,\r\n                    fieldName: \"number\",\r\n                    searchVal: 1\r\n                }\r\n            ],\r\n            FilteringLogic.Or);\r\n        expect(res).toBeTruthy();\r\n    });\r\n    it (\"tests `findMatch`\", () => {\r\n        const rec = data[0];\r\n        const res = fs.findMatch(rec, {\r\n            condition: FilteringCondition.boolean.false,\r\n            fieldName: \"boolean\"\r\n        }, -1);\r\n        expect(res).toBeTruthy();\r\n    });\r\n    it (\"tests default settings\", () => {\r\n        (data[0] as { string: string }).string = \"ROW\";\r\n        const filterstr = new FilteringStrategy();\r\n        const res = filterstr.filter(data, [{\r\n            condition: FilteringCondition.string.contains,\r\n            fieldName: \"string\",\r\n            searchVal: \"ROW\"\r\n        }]);\r\n        expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([0]);\r\n    });\r\n});\r\n"]}