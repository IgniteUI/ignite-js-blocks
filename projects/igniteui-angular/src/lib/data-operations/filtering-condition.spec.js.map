{"version":3,"sources":["src/data-operations/filtering-condition.spec.ts"],"names":[],"mappings":"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","file":"filtering-condition.spec.js","sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport {\r\n    async,\r\n    TestBed\r\n} from \"@angular/core/testing\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\n\r\nimport {FilteringCondition} from \"./filtering-condition\";\r\nimport { DataGenerator } from \"./test-util/data-generator\";\r\ndescribe(\"Unit testing FilteringCondition\", () => {\r\n    it(\"tests string conditions\", () => {\r\n        const fc = FilteringCondition.string;\r\n        // contains\r\n        expect(fc.contains(\"test123\", \"esT\"))\r\n            .toBeFalsy(\"contains ignoreCase: false\");\r\n        expect(fc.contains(\"test123\", \"esT\", true))\r\n            .toBeTruthy(\"contains ignoreCase: true\");\r\n        // does not contain\r\n        expect(fc.doesNotContain(\"test123\", \"esT\"))\r\n            .toBeTruthy(\"doesNotContain ignoreCase: false\");\r\n        expect(fc.doesNotContain(\"test123\", \"esT\", true))\r\n            .toBeFalsy(\"doesNotContain ignoreCase: true\");\r\n        // startsWith\r\n        expect(fc.startsWith(\"test123\", \"TesT\"))\r\n            .toBeFalsy(\"startsWith ignoreCase: false\");\r\n        expect(fc.startsWith(\"test123\", \"TesT\", true))\r\n            .toBeTruthy(\"startsWith ignoreCase: true\");\r\n        // endsWith\r\n        expect(fc.endsWith(\"test123\", \"T123\"))\r\n            .toBeFalsy(\"endsWith ignoreCase: false\");\r\n        expect(fc.endsWith(\"test123\", \"sT123\", true))\r\n            .toBeTruthy(\"endsWith ignoreCase: true\");\r\n        // equals\r\n        expect(fc.equals(\"test123\", \"Test123\"))\r\n            .toBeFalsy();\r\n        expect(fc.equals(\"test123\", \"Test123\", true))\r\n            .toBeTruthy();\r\n        // doesNotEqual\r\n        expect(fc.doesNotEqual(\"test123\", \"Test123\"))\r\n            .toBeTruthy(\"doesNotEqual ignoreCase: false\");\r\n        expect(fc.doesNotEqual(\"test123\", \"Test123\", true))\r\n            .toBeFalsy(\"doesNotEqual ignoreCase: true\");\r\n        // empty\r\n        expect(!fc.empty(\"test\") && fc.empty(null) && fc.empty(undefined))\r\n            .toBeTruthy(\"empty\");\r\n        // notEmpty\r\n        expect(fc.notEmpty(\"test\") && !fc.notEmpty(null) && !fc.notEmpty(undefined))\r\n            .toBeTruthy(\"notEmpty\");\r\n        // null\r\n        expect(!fc.null(\"test\") && fc.null(null) && !fc.null(undefined))\r\n            .toBeTruthy(\"null\");\r\n        // notNull\r\n        expect(fc.notNull(\"test\") && !fc.notNull(null) && fc.notNull(undefined))\r\n            .toBeTruthy(\"notNull\");\r\n    });\r\n    it(\"tests number conditions\", () => {\r\n        const fn = FilteringCondition.number;\r\n        expect(fn.doesNotEqual(1, 2) && !fn.doesNotEqual(1, 1))\r\n            .toBeTruthy(\"doesNotEqual\");\r\n        expect(fn.empty(null))\r\n            .toBeTruthy(\"empty\");\r\n        expect(!fn.equals(1, 2) && fn.equals(1, 1))\r\n            .toBeTruthy(\"equals\");\r\n        expect(!fn.greaterThan(1, 2) && fn.greaterThan(2, 1))\r\n            .toBeTruthy(\"greaterThan\");\r\n        expect(!fn.greaterThanOrEqualTo(1, 2) && !fn.greaterThanOrEqualTo(1, 2) &&\r\n                fn.greaterThanOrEqualTo(1, 1))\r\n            .toBeTruthy(\"greaterThanOrEqualTo\");\r\n        expect(fn.lessThan(1, 2) && !fn.lessThan(2, 2) &&\r\n                !fn.lessThan(3, 2))\r\n            .toBeTruthy(\"lessThan\");\r\n        expect(fn.lessThanOrEqualTo(1, 2) &&\r\n                fn.lessThanOrEqualTo(1, 1) &&\r\n                !fn.lessThanOrEqualTo(3, 2))\r\n            .toBeTruthy(\"lessThanOrEqualTo\");\r\n        expect(fn.notEmpty(1))\r\n            .toBeTruthy(\"notEmpty\");\r\n        expect(fn.empty(null))\r\n            .toBeTruthy(\"empty\");\r\n        expect(fn.notNull(1))\r\n            .toBeTruthy(\"notNull\");\r\n        expect(fn.null(null))\r\n            .toBeTruthy(\"null\");\r\n    });\r\n    it(\"tests date conditions\", () => {\r\n        const fd = FilteringCondition.date;\r\n        const now = new Date();\r\n        const cnow = new Date();\r\n        const yesterday = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\r\n        const lastMonth = ((d) => { d.setDate(1); return new Date(d.setMonth(d.getMonth() - 1)); })(new Date());\r\n        const nextMonth = ((d) => { d.setDate(1); return new Date(d.setMonth(d.getMonth() + 1)); })(new Date());\r\n        const lastYear = ((d) => new Date(d.setFullYear(d.getFullYear() - 1)))(new Date());\r\n        const nextYear = ((d) => new Date(d.setFullYear(d.getFullYear() + 1)))(new Date());\r\n\r\n        expect(fd.after(now, yesterday) && !fd.after(now, nextYear))\r\n            .toBeTruthy(\"after\");\r\n        expect(fd.before(yesterday, now) && !fd.before(now, lastYear))\r\n            .toBeTruthy(\"before\");\r\n        expect(fd.doesNotEqual(now, yesterday) && fd.doesNotEqual(now, yesterday))\r\n            .toBeTruthy(\"doesNotEqual\");\r\n        expect(fd.empty(null) && fd.empty(undefined) && !fd.empty(now))\r\n            .toBeTruthy(\"empty\");\r\n        expect(!fd.notEmpty(null) && !fd.notEmpty(undefined) && fd.notEmpty(now))\r\n            .toBeTruthy(\"notEmpty\");\r\n        expect(fd.equals(now, cnow) && !fd.equals(now, yesterday))\r\n            .toBeTruthy(\"equals\");\r\n        expect(!fd.lastMonth(now) && fd.lastMonth(lastMonth))\r\n            .toBeTruthy(\"lastMonth\");\r\n        expect(fd.lastYear(lastYear) && !fd.lastYear(now))\r\n            .toBeTruthy(\"lastYear\");\r\n        expect(!fd.nextMonth(now) && fd.nextMonth(nextMonth))\r\n            .toBeTruthy(\"nextMonth\");\r\n        expect(!fd.nextYear(now) && fd.nextYear(nextYear))\r\n            .toBeTruthy(\"nextYear\");\r\n        expect(fd.notEmpty(now) && !fd.notEmpty(null) && !fd.notEmpty(undefined))\r\n            .toBeTruthy(\"notEmpty\");\r\n        expect(fd.notNull(now) && !fd.notNull(null) && fd.notNull(undefined))\r\n            .toBeTruthy(\"notNull\");\r\n        expect(fd.null(null) && !fd.null(now) && !fd.null(undefined))\r\n            .toBeTruthy(\"null\");\r\n        expect(fd.thisMonth(now) && !fd.thisMonth(nextYear))\r\n            .toBeTruthy(\"thisMonth\");\r\n        expect(fd.thisYear(now) && !fd.thisYear(nextYear))\r\n            .toBeTruthy(\"thisYear\");\r\n        expect(fd.today(now) && !fd.today(nextYear))\r\n            .toBeTruthy(\"today\");\r\n        expect(!fd.yesterday(now) && fd.yesterday(yesterday))\r\n            .toBeTruthy(\"yesterday\");\r\n    });\r\n    it(\"tests boolean conditions\", () => {\r\n        const f = FilteringCondition.boolean;\r\n        expect(f.empty(null) && f.empty(undefined) && !f.empty(false))\r\n            .toBeTruthy(\"empty\");\r\n        expect(f.false(false) && !f.false(true))\r\n            .toBeTruthy(\"false\");\r\n        expect(!f.true(false) && f.true(true))\r\n            .toBeTruthy(\"true\");\r\n        expect(!f.notEmpty(null) && !f.notEmpty(undefined) && f.notEmpty(false))\r\n            .toBeTruthy(\"notEmpty\");\r\n        expect(f.null(null) && !f.null(undefined) && !f.null(false))\r\n            .toBeTruthy(\"null\");\r\n        expect(!f.notNull(null) && f.notNull(undefined) && f.notNull(false))\r\n            .toBeTruthy(\"notNull\");\r\n    });\r\n});\r\n"]}