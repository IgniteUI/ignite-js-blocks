{"version":3,"sources":["src/data-operations/data-util.spec.ts"],"names":[],"mappings":"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","file":"data-util.spec.js","sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport {\r\n    async,\r\n    TestBed\r\n} from \"@angular/core/testing\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport { DataGenerator } from \"./test-util/data-generator\";\r\n\r\nimport {    DataType,\r\n            DataUtil,\r\n            FilteringCondition,\r\n            FilteringLogic, FilteringStrategy, IDataState,\r\n            IFilteringExpression, IFilteringState, IPagingState, ISortingExpression, ISortingState,\r\n            PagingError, SortingDirection\r\n        } from \"../main\";\r\n/* Test sorting */\r\nfunction testSort() {\r\n    let data: any[] = [];\r\n    let dataGenerator: DataGenerator;\r\n    beforeEach(async(() => {\r\n        dataGenerator = new DataGenerator();\r\n        data = dataGenerator.data;\r\n    }));\r\n    describe(\"Test sorting\", () => {\r\n        it('sorts descending column \"number\"', () => {\r\n            const se: ISortingExpression = {\r\n                dir: SortingDirection.Desc,\r\n                fieldName: \"number\"\r\n            };\r\n            const res = DataUtil.sort(data, {expressions: [se]});\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual(dataGenerator.generateArray(4, 0));\r\n        });\r\n        it('sorts ascending column \"boolean\"', () => {\r\n            const se: ISortingExpression = {\r\n                dir: SortingDirection.Asc,\r\n                fieldName: \"boolean\"\r\n            };\r\n            const res = DataUtil.sort(data, {expressions: [ se ]});\r\n            expect(dataGenerator.getValuesForColumn(res, \"boolean\"))\r\n                .toEqual([false, false, false, true, true]);\r\n        });\r\n        // test multiple sorting\r\n        it('sorts descending column \"boolean\", sorts \"date\" ascending', () => {\r\n            const se0: ISortingExpression = {\r\n                dir: SortingDirection.Desc,\r\n                fieldName: \"boolean\"\r\n            };\r\n            const se1: ISortingExpression = {\r\n                dir: SortingDirection.Asc,\r\n                fieldName: \"date\"\r\n            };\r\n            const res = DataUtil.sort(data, {expressions: [se0, se1]});\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual([1, 3, 0, 2, 4]);\r\n        });\r\n        it (\"sorts as applying default setting ignoreCase to false\", () => {\r\n            data[4].string = data[4].string.toUpperCase();\r\n            const se0: ISortingExpression = {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: \"string\"\r\n                };\r\n            let res = DataUtil.sort(data, {\r\n                expressions: [se0]\r\n            });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual([3, 2, 1, 0, 4], \"expressionDefaults.ignoreCase = false\");\r\n            se0.ignoreCase = true;\r\n            res = DataUtil.sort(data, {\r\n                    expressions: [se0]\r\n                });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual(dataGenerator.generateArray(4, 0));\r\n        });\r\n    });\r\n}\r\n/* //Test sorting */\r\n/* Test filtering */\r\nclass CustomFilteringStrategy extends FilteringStrategy {\r\n   public filter<T>(data: T[], expressions: IFilteringExpression[], logic?: FilteringLogic): T[] {\r\n        const len = Math.ceil(data.length / 2);\r\n        const res: T[] = [];\r\n        let i;\r\n        let rec;\r\n        if (!expressions || !expressions.length || !len) {\r\n            return data;\r\n        }\r\n        for (i = 0; i < len; i++) {\r\n            rec = data[i];\r\n            if (this.matchRecordByExpressions(rec, expressions, logic)) {\r\n                res.push(rec);\r\n            }\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nfunction testFilter() {\r\n    const dataGenerator: DataGenerator = new DataGenerator();\r\n    const data: object[] = dataGenerator.data;\r\n    describe(\"test filtering\", () => {\r\n        it('filters \"number\" column greater than 3', () => {\r\n            const res = DataUtil.filter(data, {\r\n                expressions: [{fieldName: \"number\", condition: FilteringCondition.number.greaterThan, searchVal: 3}]\r\n            });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([4]);\r\n        });\r\n        // test string filtering - with ignoreCase true/false\r\n        it('filters \"string\" column contains \"row\"', () => {\r\n            let res = DataUtil.filter(data, {\r\n                                        expressions: [\r\n                                                {\r\n                                                    condition: FilteringCondition.string.contains,\r\n                                                    fieldName: \"string\",\r\n                                                    searchVal: \"row\"\r\n                                                }]\r\n                                    });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual(dataGenerator.getValuesForColumn(data, \"number\"));\r\n            (res[0] as { string: string}).string = \"ROW\";\r\n            // case-sensitive\r\n            res = DataUtil.filter(res, {\r\n                                        expressions: [\r\n                                                {\r\n                                                    condition: FilteringCondition.string.contains,\r\n                                                    fieldName: \"string\",\r\n                                                    ignoreCase: false,\r\n                                                    searchVal: \"ROW\"\r\n                                                }]\r\n                                    });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([0]);\r\n        });\r\n        // test date\r\n        it(\"filters 'date' column\", () => {\r\n            const res = DataUtil.filter(data, {\r\n                                        expressions: [\r\n                                                {\r\n                                                    condition: FilteringCondition.date.after,\r\n                                                    fieldName: \"date\",\r\n                                                    searchVal: new Date()\r\n                                                }]\r\n                                    });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([1, 2, 3, 4]);\r\n        });\r\n        it(\"filters 'bool' column\", () => {\r\n             const res = DataUtil.filter(data, {\r\n                                        expressions: [\r\n                                                {\r\n                                                    condition: FilteringCondition.boolean.false,\r\n                                                    fieldName: \"boolean\"\r\n                                                }]\r\n                                    });\r\n             expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([0, 2, 4]);\r\n        });\r\n        it(\"filters using custom filtering strategy\", () => {\r\n            const res = DataUtil.filter(data, {\r\n                                        expressions: [\r\n                                                {\r\n                                                    condition: FilteringCondition.boolean.false,\r\n                                                    fieldName: \"boolean\"\r\n                                                }],\r\n                                        strategy: new CustomFilteringStrategy()\r\n                                    });\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([0, 2]);\r\n        });\r\n    });\r\n}\r\n/* //Test filtering */\r\n/* Test paging */\r\nfunction testPage() {\r\n    const dataGenerator: DataGenerator = new DataGenerator();\r\n    const data: object[] = dataGenerator.data;\r\n\r\n    describe(\"test paging\", () => {\r\n        it(\"paginates data\", () => {\r\n            let state: IPagingState = {index: 0, recordsPerPage: 3};\r\n            let res = DataUtil.page(data, state);\r\n            expect(state.metadata.error).toBe(PagingError.None);\r\n            expect(state.metadata.countPages).toBe(2);\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual([0, 1, 2]);\r\n            // go to second page\r\n            state = {index: 1, recordsPerPage: 3};\r\n            res = DataUtil.page(data, state);\r\n            expect(state.metadata.error).toBe(PagingError.None);\r\n            expect(state.metadata.countPages).toBe(2);\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual([3, 4]);\r\n        });\r\n        it(\"tests paging errors\", () => {\r\n            let state: IPagingState = {index: -1, recordsPerPage: 3};\r\n            let res = DataUtil.page(data, state);\r\n            expect(state.metadata.error).toBe(PagingError.IncorrectPageIndex);\r\n            state = {index: 3, recordsPerPage: 3},\r\n            res = DataUtil.page(data, state);\r\n            expect(state.metadata.error).toBe(PagingError.IncorrectPageIndex);\r\n            state = {index: 3, recordsPerPage: 0},\r\n            res = DataUtil.page(data, state);\r\n            expect(state.metadata.error).toBe(PagingError.IncorrectRecordsPerPage);\r\n            // test with paging state null\r\n            res = DataUtil.page(data, null);\r\n            expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                .toEqual(dataGenerator.generateArray(0, 4));\r\n        });\r\n    });\r\n}\r\nfunction testProcess() {\r\n    describe(\"test process\", () => {\r\n        it(\"calls process as applies filtering, sorting, paging\", () => {\r\n            let metadata;\r\n            const state: IDataState = {\r\n                filtering: {\r\n                    expressions: [{\r\n                        condition: FilteringCondition.number.greaterThan,\r\n                        fieldName: \"number\",\r\n                        searchVal: 1}]\r\n                },\r\n                paging: {\r\n                    index: 1,\r\n                    recordsPerPage: 2\r\n                },\r\n                sorting: {\r\n                    expressions: [\r\n                        {\r\n                            dir: SortingDirection.Desc,\r\n                            fieldName: \"number\"\r\n                        }\r\n                    ]\r\n                }\r\n            };\r\n            const dataGenerator: DataGenerator = new DataGenerator();\r\n            const data: object[] = dataGenerator.data;\r\n            const result = DataUtil.process(data, state);\r\n            expect(dataGenerator.getValuesForColumn(result, \"number\"))\r\n                    .toEqual([2]);\r\n            metadata = state.paging.metadata;\r\n            expect(metadata.countPages === 2 && metadata.error === PagingError.None)\r\n                .toBeTruthy();\r\n        });\r\n    });\r\n}\r\n/* //Test paging */\r\ndescribe(\"DataUtil\", () => {\r\n    testSort();\r\n    testFilter();\r\n    testPage();\r\n    // test process\r\n    testProcess();\r\n    // test helper function getFilteringConditionsByDataType\r\n    it(\"tests getFilteringConditionsByDataType\", () => {\r\n        const dataGenerator = new DataGenerator();\r\n        const stringCond = Object.keys(FilteringCondition.string);\r\n        const numberCond = Object.keys(FilteringCondition.number);\r\n        const booleanCond = Object.keys(FilteringCondition.boolean);\r\n        const dateCond = Object.keys(FilteringCondition.date);\r\n\r\n        expect(\r\n            dataGenerator.isSuperset(DataUtil.getListOfFilteringConditionsForDataType(DataType.String), stringCond))\r\n                .toBeTruthy(\"string filtering conditions\");\r\n        expect(\r\n            dataGenerator.isSuperset(DataUtil.getListOfFilteringConditionsForDataType(DataType.Number), numberCond))\r\n                .toBeTruthy(\"number filtering conditions\");\r\n        expect(\r\n            dataGenerator.isSuperset(DataUtil.getListOfFilteringConditionsForDataType(DataType.Boolean), booleanCond))\r\n                .toBeTruthy(\"boolean filtering conditions\");\r\n        expect(\r\n            dataGenerator.isSuperset(DataUtil.getListOfFilteringConditionsForDataType(DataType.Date), dateCond))\r\n                .toBeTruthy(\"date filtering conditions\");\r\n    });\r\n\r\n});\r\n"]}