{"version":3,"sources":["src/data-operations/data-container.spec.ts"],"names":[],"mappings":"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","file":"data-container.spec.js","sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport {\r\n    TestBed\r\n} from \"@angular/core/testing\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport { DataGenerator} from \"./test-util/data-generator\";\r\n\r\nimport {DataAccess, DataContainer} from \"./data-container\";\r\nimport {IDataState} from \"./data-state.interface\";\r\nimport {DataUtil} from \"./data-util\";\r\nimport {FilteringCondition} from \"./filtering-condition\";\r\nimport { IFilteringState } from \"./filtering-state.interface\";\r\nimport {IPagingState, PagingError} from \"./paging-state.interface\";\r\nimport {ISortingExpression, SortingDirection} from \"./sorting-expression.interface\";\r\nimport {ISortingState} from \"./sorting-state.interface\";\r\n\r\ndescribe(\"DataContainer\", () => {\r\n    let dataGenerator: DataGenerator;\r\n    let data: object[];\r\n    let dc: DataContainer;\r\n    beforeEach(() => {\r\n        dataGenerator = new DataGenerator();\r\n        data = dataGenerator.data;\r\n        dc = new DataContainer(data);\r\n    });\r\n    it(\"tests process\", () => {\r\n        // test filtering\r\n        dc.state = {\r\n            filtering: {\r\n                expressions: [\r\n                    {\r\n                        condition: FilteringCondition.number.greaterThanOrEqualTo,\r\n                        fieldName: \"number\",\r\n                        searchVal: 1\r\n                    }\r\n                ]\r\n            }\r\n        };\r\n        dc.process();\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([1, 2, 3, 4]);\r\n        expect(dataGenerator.getValuesForColumn(dc.data, \"number\"))\r\n            .toEqual([0, 1, 2, 3, 4]);\r\n        // apply sorting without removing filtering\r\n        dc.state.sorting = {\r\n            expressions: [\r\n                {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: \"number\"\r\n                }\r\n            ]\r\n        };\r\n        dc.process();\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([4, 3, 2, 1]);\r\n        expect(dataGenerator.getValuesForColumn(dc.data, \"number\"))\r\n            .toEqual([0, 1, 2, 3, 4]);\r\n        // apply paging(+filtering and sorting)\r\n        dc.state.paging = {\r\n            index: 1,\r\n            recordsPerPage: 3\r\n        };\r\n        dc.process();\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([1]);\r\n        expect(dc.state.paging.metadata.countPages)\r\n            .toEqual(2);\r\n    });\r\n    it (\"tests sort\", () => {\r\n        // apply sorting without removing filtering\r\n        let res;\r\n        const sortingState: ISortingState = {\r\n            expressions: [\r\n                {\r\n                    dir: SortingDirection.Desc,\r\n                    fieldName: \"number\"\r\n                }\r\n            ]\r\n        };\r\n        res = dc.process({sorting: sortingState});\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([4, 3, 2, 1, 0]);\r\n        expect(dc.state.sorting)\r\n            .toEqual(sortingState);\r\n    });\r\n    it (\"tests filter\", () => {\r\n        // apply sorting without removing filtering\r\n        let res;\r\n        const filteringState: IFilteringState = {\r\n            expressions: [\r\n                {\r\n                    condition: FilteringCondition.number.doesNotEqual,\r\n                    fieldName: \"number\",\r\n                    searchVal: 4\r\n                }\r\n            ]\r\n        };\r\n        res = dc.process({filtering: filteringState});\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([0, 1, 2, 3]);\r\n        expect(dc.state.filtering)\r\n            .toEqual(filteringState);\r\n    });\r\n    it (\"tests page\", () => {\r\n        // apply sorting without removing filtering\r\n        const pagingState: IPagingState = {\r\n            index: 0,\r\n            recordsPerPage: 4\r\n        };\r\n        dc.process({paging: pagingState});\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([0, 1, 2, 3]);\r\n        expect(dc.state.paging.metadata.countPages)\r\n            .toEqual(2);\r\n        expect(dc.state.paging.metadata.error)\r\n            .toEqual(PagingError.None);\r\n        pagingState.index = 1;\r\n        dc.process({paging: pagingState});\r\n        expect(dataGenerator.getValuesForColumn(dc.transformedData, \"number\"))\r\n            .toEqual([4]);\r\n        expect(dc.state.paging.metadata.countPages)\r\n            .toEqual(2);\r\n        expect(dc.state.paging.metadata.error)\r\n            .toEqual(PagingError.None);\r\n    });\r\n\r\n    // test CRUD operations\r\n    it(\"tests `addRecord`\", () => {\r\n            let record = {\r\n                number: -1\r\n            };\r\n            dc.addRecord(record);\r\n            expect(dc.data).toBeTruthy();\r\n            expect(dc.data.length).toBe(6);\r\n            expect(dc.data[5]).toEqual(record);\r\n            // add at specific position\r\n            record = {number: -2};\r\n            dc.addRecord(record, 0);\r\n            expect(dc.data.length).toBe(7);\r\n            expect(dc.data[0]).toEqual(record);\r\n        });\r\n    it (\"tests `deleteRecord`\", () => {\r\n            const record = data[0];\r\n            // remove first element\r\n            const res = dc.deleteRecord(record);\r\n            expect(res).toBeTruthy();\r\n            expect(dc.data.length).toBe(4);\r\n            expect(dataGenerator.getValuesForColumn(dc.data, \"number\"))\r\n                .toEqual([1, 2, 3, 4]);\r\n        });\r\n    it (\"tests `deleteRecordByIndex`\", () => {\r\n            // remove first element\r\n            const res = dc.deleteRecordByIndex(0);\r\n            expect(res).toBeTruthy();\r\n            expect(dc.data.length).toBe(4);\r\n            expect(dataGenerator.getValuesForColumn(dc.data, \"number\"))\r\n                .toEqual([1, 2, 3, 4]);\r\n        });\r\n    it (\"tests `updateRecordByIndex`\", () => {\r\n            const recordCopy = Object.assign({}, data[0]);\r\n            const res = dc.updateRecordByIndex(0, {number: -1});\r\n            (recordCopy as { number: number }).number = -1;\r\n            expect(dc.data[0]).toEqual(recordCopy);\r\n        });\r\n    it (\"tests `getRecordInfoByKeyValue`\", () => {\r\n            let recordInfo = dc.getRecordInfoByKeyValue(\"number\", 0);\r\n            expect(recordInfo.index === 0 && recordInfo.record === dc.data[0])\r\n                .toBeTruthy(\"tests getRecordInfoByKeyValue('number', 0)\");\r\n            recordInfo = dc.getRecordInfoByKeyValue(\"number\", -1);\r\n            expect(recordInfo.index === -1 && recordInfo.record === undefined)\r\n                .toBeTruthy(\"tests getRecordInfoByKeyValue('number', -1)\");\r\n        });\r\n    it (\"tests `getIndexOfRecord`\", () => {\r\n            let index = dc.getIndexOfRecord(data[1]);\r\n            expect(index).toBe(1, \"original data\");\r\n            index = dc.getIndexOfRecord(data[0], DataAccess.TransformedData);\r\n            expect(index).toBe(0, \"transformed data\");\r\n        });\r\n    it (\"tests `getRecordByIndex`\", () => {\r\n            let rec = dc.getRecordByIndex(0);\r\n            expect(rec).toBe(data[0], \"original data\");\r\n            rec = dc.getRecordByIndex(0, DataAccess.TransformedData);\r\n            expect(rec).toBe(dc.transformedData[0], \"transformed data\");\r\n        });\r\n});\r\n"]}