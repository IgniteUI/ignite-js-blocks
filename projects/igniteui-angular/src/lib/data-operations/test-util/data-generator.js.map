{"version":3,"sources":["src/data-operations/test-util/data-generator.ts"],"names":[],"mappings":"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","file":"data-generator.js","sourcesContent":["import {DataType} from \"../data-util\";\r\n\r\nconst COUNT_ROWS = 5;\r\nconst COUNT_COLS = 4;\r\n\r\nexport interface IDataColumn {\r\n    fieldName: string;\r\n    type: DataType;\r\n}\r\n\r\nexport class DataGenerator {\r\n    public columns: IDataColumn[] = [];\r\n    public data: object[] = [];\r\n    constructor(countRows = COUNT_ROWS, countCols = COUNT_COLS) {\r\n        this.columns = this.generateColumns(countCols);\r\n        this.data = this.generateData(countRows);\r\n    }\r\n    public generateArray(startValue, endValue) {\r\n        const len = Math.abs(startValue - endValue);\r\n        const decrement = startValue > endValue;\r\n        return Array.from({length: len + 1}, (e, i) => decrement ? startValue - i : startValue + i);\r\n    }\r\n    public getValuesForColumn(data, fieldName) {\r\n        return data.map((x) => x[fieldName]);\r\n    }\r\n    public isSuperset(haystack, arr) {\r\n        return arr.every((val) => haystack.indexOf(val) >= 0);\r\n    }\r\n    private generateColumns(countCols): IDataColumn[] {\r\n        let i: number;\r\n        let len: number;\r\n        let res;\r\n        const defaultColumns: IDataColumn[] = [\r\n            {\r\n                fieldName: \"number\",\r\n                type: DataType.Number\r\n            },\r\n            {\r\n                fieldName: \"string\",\r\n                type: DataType.String\r\n            },\r\n            {\r\n                fieldName: \"date\",\r\n                type: DataType.Date\r\n            },\r\n            {\r\n                fieldName: \"boolean\",\r\n                type: DataType.Boolean\r\n            }\r\n        ];\r\n        if (countCols <= 0) {\r\n            return defaultColumns;\r\n        }\r\n        if (countCols <= defaultColumns.length) {\r\n            return defaultColumns.slice(0, countCols);\r\n        }\r\n        len = countCols - defaultColumns.length;\r\n        res = defaultColumns;\r\n        for (i = 0; i < len; i++) {\r\n            res.push({\r\n                fieldName: `col${i}`,\r\n                type: DataType.String\r\n            });\r\n        }\r\n        return res;\r\n    }\r\n    private generateData(countRows: number) {\r\n        let i;\r\n        let j;\r\n        let rec;\r\n        let val;\r\n        let col;\r\n        const data = [];\r\n        for (i = 0; i < countRows; i++) {\r\n            rec = {};\r\n            for (j = 0; j < this.columns.length; j++) {\r\n                col = this.columns[j];\r\n                switch (col.type) {\r\n                    case DataType.Number:\r\n                        val = i;\r\n                        break;\r\n                    case DataType.Date:\r\n                        val = new Date(Date.now() + i * 24 * 60 * 60 * 1000);\r\n                        break;\r\n                    case DataType.Boolean:\r\n                        val = !!(i % 2);\r\n                        break;\r\n                    default:\r\n                        val = `row${i}, col${j}`;\r\n                        break;\r\n                }\r\n                rec[col.fieldName] = val;\r\n            }\r\n            data.push(rec);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n"]}