{"version":3,"sources":["src/data-operations/sorting-strategy.spec.ts"],"names":[],"mappings":";;AAOA,6DAA2D;AAE3D,gCAA4D;AAE5D,QAAQ,CAAC,8BAA8B,EAAE;IACrC,IAAI,aAA4B,CAAC;IACjC,IAAI,IAAc,CAAC;IACnB,IAAI,QAAyB,CAAC;IAC9B,UAAU,CAAC;QACP,aAAa,GAAG,IAAI,8BAAa,EAAE,CAAC;QACpC,IAAI,GAAG,aAAa,CAAC,IAAI,CAAC;QAC1B,QAAQ,GAAG,IAAI,sBAAe,EAAE,CAAC;IACrC,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,cAAc,EAAE;QACf,IAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE;YAC5B;gBACI,GAAG,EAAE,uBAAgB,CAAC,GAAG;gBACzB,SAAS,EAAE,SAAS;aACvB,EAAE;gBACC,GAAG,EAAE,uBAAgB,CAAC,IAAI;gBAC1B,SAAS,EAAE,QAAQ;aACtB;SAAC,CAAC,CAAC;QACR,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aAC1C,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,wBAAwB,EAAE;QACzB,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;YACjC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,CAAC;YACzC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;aAC9C,UAAU,CAAC,4CAA4C,CAAC,CAAC;QAC9D,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;YAClC,QAAQ,CAAC,aAAa,CAAC,GAAG,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YACvC,QAAQ,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAC9C,UAAU,CAAC,cAAc,CAAC,CAAC;QAChC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC;YACjC,QAAQ,CAAC,aAAa,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC;YACxC,QAAQ,CAAC,aAAa,CAAC,MAAM,EAAE,MAAM,CAAC,KAAK,CAAC,CAC3C;aACJ,UAAU,CAAC,wBAAwB,CAAC,CAAC;IAC9C,CAAC,CAAC,CAAC;IACH,EAAE,CAAC,wBAAwB,EAAE;QACzB,QAAQ,GAAG,IAAI,sBAAe,EAAE,CAAC;QAChC,IAAI,CAAC,CAAC,CAAwB,CAAC,MAAM,GAAG,KAAK,CAAC;QAC/C,IAAM,GAAG,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACzB,GAAG,EAAE,uBAAgB,CAAC,GAAG;gBACzB,SAAS,EAAE,QAAQ;aACtB,CAAC,CAAC,CAAC;QACR,MAAM,CAAC,aAAa,CAAC,kBAAkB,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aAC1C,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAC1C,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC","file":"sorting-strategy.spec.js","sourcesContent":["import { Component, ViewChild } from \"@angular/core\";\r\nimport {\r\n    async,\r\n    TestBed\r\n} from \"@angular/core/testing\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { By } from \"@angular/platform-browser\";\r\nimport { DataGenerator } from \"./test-util/data-generator\";\r\n\r\nimport { SortingDirection, SortingStrategy } from \"../main\";\r\n\r\ndescribe(\"Unit testing SortingStrategy\", () => {\r\n    let dataGenerator: DataGenerator;\r\n    let data: object[];\r\n    let strategy: SortingStrategy;\r\n    beforeEach(() => {\r\n        dataGenerator = new DataGenerator();\r\n        data = dataGenerator.data;\r\n        strategy = new SortingStrategy();\r\n    });\r\n    it(\"tests `sort`\", () => {\r\n        const res = strategy.sort(data, [\r\n            {\r\n                dir: SortingDirection.Asc,\r\n                fieldName: \"boolean\"\r\n            }, {\r\n                dir: SortingDirection.Desc,\r\n                fieldName: \"number\"\r\n            }]);\r\n        expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([4, 2, 0, 3, 1]);\r\n    });\r\n    it(\"tests `compareObjects`\", () => {\r\n        expect(strategy.compareValues(1, 0) === 1 &&\r\n                strategy.compareValues(true, false) === 1 &&\r\n                strategy.compareValues(\"bc\", \"adfc\") === 1)\r\n            .toBeTruthy(\"compare first argument greater than second\");\r\n        expect(strategy.compareValues(1, 2) === -1 &&\r\n                strategy.compareValues(\"a\", \"b\") === -1 &&\r\n                strategy.compareValues(false, true) === -1)\r\n            .toBeTruthy(\"compare 0, 1\");\r\n        expect(strategy.compareValues(0, 0) === 0 &&\r\n                strategy.compareValues(true, true) === 0 &&\r\n                strategy.compareValues(\"test\", \"test\") === 0\r\n                )\r\n            .toBeTruthy(\"Comare equal variables\");\r\n    });\r\n    it(\"tests default settings\", () => {\r\n        strategy = new SortingStrategy();\r\n        (data[4] as { string: string }).string = \"ROW\";\r\n        const res = strategy.sort(data, [{\r\n                dir: SortingDirection.Asc,\r\n                fieldName: \"string\"\r\n            }]);\r\n        expect(dataGenerator.getValuesForColumn(res, \"number\"))\r\n                    .toEqual([4, 0, 1, 2, 3]);\r\n    });\r\n});\r\n"]}