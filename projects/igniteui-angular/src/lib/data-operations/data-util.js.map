{"version":3,"sources":["src/data-operations/data-util.ts"],"names":[],"mappings":"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","file":"data-util.js","sourcesContent":["import { FilteringCondition } from \"./filtering-condition\";\r\nimport { FilteringLogic, IFilteringExpression } from \"./filtering-expression.interface\";\r\nimport { filteringStateDefaults, IFilteringState } from \"./filtering-state.interface\";\r\nimport { FilteringStrategy, IFilteringStrategy } from \"./filtering-strategy\";\r\n\r\nimport { ISortingExpression, SortingDirection } from \"./sorting-expression.interface\";\r\nimport { ISortingState, SortingStateDefaults } from \"./sorting-state.interface\";\r\nimport { ISortingStrategy, SortingStrategy } from \"./sorting-strategy\";\r\n\r\nimport { IPagingState, PagingError } from \"./paging-state.interface\";\r\n\r\nimport { IDataState } from \"./data-state.interface\";\r\n\r\nexport enum DataType {\r\n    String,\r\n    Number,\r\n    Boolean,\r\n    Date\r\n}\r\n\r\nexport class DataUtil {\r\n    public static mergeDefaultProperties(target: object, defaults: object) {\r\n        if (!defaults) {\r\n            return target;\r\n        }\r\n        if (!target) {\r\n            target = Object.assign({}, defaults);\r\n            return target;\r\n        }\r\n        Object\r\n            .keys(defaults)\r\n            .forEach((key) => {\r\n                if (target[key] === undefined && defaults[key] !== undefined) {\r\n                    target[key] = defaults[key];\r\n                }\r\n            });\r\n        return target;\r\n    }\r\n    public static getFilteringConditionsForDataType(dataType: DataType):\r\n        {[name: string]: (value: any, searchVal?: any, ignoreCase?: boolean) => void} {\r\n        let dt: string;\r\n        switch (dataType) {\r\n            case DataType.String:\r\n                dt = \"string\";\r\n                break;\r\n            case DataType.Number:\r\n                dt = \"number\";\r\n                break;\r\n            case DataType.Boolean:\r\n                dt = \"boolean\";\r\n                break;\r\n            case DataType.Date:\r\n                dt = \"date\";\r\n                break;\r\n        }\r\n        return FilteringCondition[dt];\r\n    }\r\n    public static getListOfFilteringConditionsForDataType(dataType: DataType): string[] {\r\n        return Object.keys(DataUtil.getFilteringConditionsForDataType(dataType));\r\n    }\r\n    public static sort<T>(data: T[], state: ISortingState): T[] {\r\n        // set defaults\r\n        DataUtil.mergeDefaultProperties(state, SortingStateDefaults);\r\n        // apply default settings for each sorting expression(if not set)\r\n        return state.strategy.sort(data, state.expressions);\r\n    }\r\n    public static page<T>(data: T[], state: IPagingState): T[] {\r\n        if (!state) {\r\n            return data;\r\n        }\r\n        const len = data.length;\r\n        const index = state.index;\r\n        const res = [];\r\n        const recordsPerPage = state.recordsPerPage;\r\n        state.metadata = {\r\n            countPages: 0,\r\n            countRecords: data.length,\r\n            error: PagingError.None\r\n        };\r\n        if (index < 0 || isNaN(index)) {\r\n            state.metadata.error = PagingError.IncorrectPageIndex;\r\n            return res;\r\n        }\r\n        if (recordsPerPage <= 0 || isNaN(recordsPerPage)) {\r\n            state.metadata.error = PagingError.IncorrectRecordsPerPage;\r\n            return res;\r\n        }\r\n        state.metadata.countPages = Math.ceil(len / recordsPerPage);\r\n        if (!len) {\r\n            return data;\r\n        }\r\n        if (index >= state.metadata.countPages) {\r\n            state.metadata.error = PagingError.IncorrectPageIndex;\r\n            return res;\r\n        }\r\n        return data.slice(index * recordsPerPage, (index + 1) * recordsPerPage);\r\n    }\r\n    public static filter<T>(data: T[],\r\n                            state: IFilteringState): T[] {\r\n        // set defaults\r\n        DataUtil.mergeDefaultProperties(state, filteringStateDefaults);\r\n        if (!state.strategy) {\r\n            return data;\r\n        }\r\n        return state.strategy.filter(data, state.expressions, state.logic);\r\n    }\r\n    public static process<T>(data: T[], state: IDataState): T[] {\r\n        if (!state) {\r\n            return data;\r\n        }\r\n        if (state.filtering) {\r\n            data = DataUtil.filter(data, state.filtering);\r\n        }\r\n        if (state.sorting) {\r\n            data = DataUtil.sort(data, state.sorting);\r\n        }\r\n        if (state.paging) {\r\n            data = DataUtil.page(data, state.paging);\r\n        }\r\n        return data;\r\n    }\r\n}\r\n"]}