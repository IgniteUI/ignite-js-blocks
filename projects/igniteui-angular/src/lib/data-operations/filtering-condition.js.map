{"version":3,"sources":["src/data-operations/filtering-condition.ts"],"names":[],"mappings":"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","file":"filtering-condition.js","sourcesContent":["// helper functions\r\nfunction applyIgnoreCase(a: string, ignoreCase: boolean): string {\r\n    a = a || \"\";\r\n    // bulletproof\r\n    return ignoreCase ? (\"\" + a).toLowerCase() : a;\r\n}\r\nfunction getDateParts(date: Date, dateFormat?: string):\r\n                    {   year?: number,\r\n                        month?: number,\r\n                        day?: number,\r\n                        hours?: number,\r\n                        minutes?: number,\r\n                        seconds?: number,\r\n                        milliseconds?: number\r\n                    } {\r\n    const res = {\r\n        day: null,\r\n        hours: null,\r\n        milliseconds: null,\r\n        minutes: null,\r\n        month: null,\r\n        seconds: null,\r\n        year: null\r\n    };\r\n    if (!date || !dateFormat) {\r\n        return res;\r\n    }\r\n    if (dateFormat.indexOf(\"y\") >= 0) {\r\n        res.year = date.getFullYear();\r\n    }\r\n    if (dateFormat.indexOf(\"M\") >= 0) {\r\n        res.month = date.getMonth();\r\n    }\r\n    if (dateFormat.indexOf(\"d\") >= 0) {\r\n        res.day = date.getDate();\r\n    }\r\n    if (dateFormat.indexOf(\"h\") >= 0) {\r\n        res.hours = date.getHours();\r\n    }\r\n    if (dateFormat.indexOf(\"m\") >= 0) {\r\n        res.minutes = date.getMinutes();\r\n    }\r\n    if (dateFormat.indexOf(\"s\") >= 0) {\r\n        res.seconds = date.getSeconds();\r\n    }\r\n    if (dateFormat.indexOf(\"f\") >= 0) {\r\n        res.milliseconds = date.getMilliseconds();\r\n    }\r\n    return res;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport let FilteringCondition = {\r\n    boolean: {\r\n        true(target: boolean): boolean {\r\n            return target;\r\n        },\r\n        false(target: boolean): boolean {\r\n            return !target;\r\n        },\r\n        null(target: boolean): boolean {\r\n            return target === null;\r\n        },\r\n        notNull(target: boolean): boolean {\r\n            return target !== null;\r\n        },\r\n        empty(target: boolean): boolean {\r\n            return target === null || target === undefined;\r\n        },\r\n        notEmpty(target: boolean): boolean {\r\n            return target !== null && target !== undefined;\r\n        }\r\n    },\r\n    date: {\r\n        equals(target: Date, searchVal: Date): boolean {\r\n            return +target === +searchVal;\r\n        },\r\n        doesNotEqual(target: Date, searchVal: Date): boolean {\r\n            return !FilteringCondition.date.equals(target, searchVal);\r\n        },\r\n        before(target: Date, searchVal: Date): boolean {\r\n            return target < searchVal;\r\n        },\r\n        after(target: Date, searchVal: Date): boolean {\r\n            return target > searchVal;\r\n        },\r\n        today(target: Date): boolean {\r\n            const d = getDateParts(target, \"yMd\");\r\n            const now = getDateParts(new Date(), \"yMd\");\r\n            return  d.year === now.year &&\r\n                    d.month === now.month &&\r\n                    d.day === now.day;\r\n        },\r\n        yesterday(target: Date): boolean {\r\n            const td = getDateParts(target, \"yMd\");\r\n            const y = ((d) => new Date(d.setDate(d.getDate() - 1)))(new Date());\r\n            const yesterday = getDateParts(y, \"yMd\");\r\n            return  td.year === yesterday.year &&\r\n                    td.month === yesterday.month &&\r\n                    td.day === yesterday.day;\r\n        },\r\n        thisMonth(target: Date): boolean {\r\n            const d = getDateParts(target, \"yM\");\r\n            const now = getDateParts(new Date(), \"yM\");\r\n            return  d.year === now.year &&\r\n                    d.month === now.month;\r\n        },\r\n        lastMonth(target: Date): boolean {\r\n            const d = getDateParts(target, \"yM\");\r\n            const now = getDateParts(new Date(), \"yM\");\r\n            if (!now.month) {\r\n                now.month = 11;\r\n                now.year -= 1;\r\n            } else {\r\n                now.month--;\r\n            }\r\n            return  d.year === now.year &&\r\n                    d.month === now.month;\r\n        },\r\n        nextMonth(target: Date): boolean {\r\n            const d = getDateParts(target, \"yM\");\r\n            const now = getDateParts(new Date(), \"yM\");\r\n            if (now.month === 11) {\r\n                now.month = 0;\r\n                now.year += 1;\r\n            } else {\r\n                now.month++;\r\n            }\r\n            return  d.year === now.year &&\r\n                    d.month === now.month;\r\n        },\r\n        thisYear(target: Date): boolean {\r\n            const d = getDateParts(target, \"y\");\r\n            const now = getDateParts(new Date(), \"y\");\r\n            return  d.year === now.year;\r\n        },\r\n        lastYear(target: Date): boolean {\r\n            const d = getDateParts(target, \"y\");\r\n            const now = getDateParts(new Date(), \"y\");\r\n            return  d.year === now.year - 1;\r\n        },\r\n        nextYear(target: Date): boolean {\r\n            const d = getDateParts(target, \"y\");\r\n            const now = getDateParts(new Date(), \"y\");\r\n            return  d.year === now.year + 1;\r\n        },\r\n        null(target: Date): boolean {\r\n            return target === null;\r\n        },\r\n        notNull(target: Date): boolean {\r\n            return target !== null;\r\n        },\r\n        empty(target: Date): boolean {\r\n            return target === null || target === undefined;\r\n        },\r\n        notEmpty(target: Date): boolean {\r\n            return target !== null && target !== undefined;\r\n        }\r\n    },\r\n    number: {\r\n        equals(target: number, searchVal: number): boolean {\r\n            return target === searchVal;\r\n        },\r\n        doesNotEqual(target: number, searchVal: number): boolean {\r\n            return target !== searchVal;\r\n        },\r\n        greaterThan(target: number, searchVal: number): boolean {\r\n            return target > searchVal;\r\n        },\r\n        lessThan(target: number, searchVal: number): boolean {\r\n            return target < searchVal;\r\n        },\r\n        greaterThanOrEqualTo(target: number, searchVal: number): boolean {\r\n            return target >= searchVal;\r\n        },\r\n        lessThanOrEqualTo(target: number, searchVal: number): boolean {\r\n            return target <= searchVal;\r\n        },\r\n        null(target: number): boolean {\r\n            return target === null;\r\n        },\r\n        notNull(target): boolean {\r\n            return target !== null;\r\n        },\r\n        empty(target: number): boolean {\r\n            return target === null || target === undefined || isNaN(target);\r\n        },\r\n        notEmpty(target: number): boolean {\r\n            return target !== null && target !== undefined && !isNaN(target);\r\n        }\r\n    },\r\n    string: {\r\n        contains(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target.indexOf(search) !== -1;\r\n        },\r\n        startsWith(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target.startsWith(search);\r\n        },\r\n        endsWith(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target.endsWith(search);\r\n        },\r\n        doesNotContain(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target.indexOf(search) === -1;\r\n        },\r\n        equals(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target === search;\r\n        },\r\n        doesNotEqual(target: string, searchVal: string, ignoreCase?: boolean): boolean {\r\n            const search = applyIgnoreCase(searchVal, ignoreCase);\r\n            target = applyIgnoreCase(target, ignoreCase);\r\n            return target !== search;\r\n        },\r\n        null(target: string): boolean {\r\n            return target === null;\r\n        },\r\n        notNull(target: string): boolean {\r\n            return target !== null;\r\n        },\r\n        empty(target: string): boolean {\r\n            return target === null || target === undefined || target.length === 0;\r\n        },\r\n        notEmpty(target: string): boolean {\r\n            return target !== null && target !== undefined && target.length > 0;\r\n        }\r\n    }\r\n};\r\n"]}